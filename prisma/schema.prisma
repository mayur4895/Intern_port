generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType { 
  STUDENT
  EMPLOYER
  ADMIN
}

model User {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?               @unique
  emailVerified      DateTime?
  image              String?
  phone              String?               @unique
  isphoneVerified    Boolean               @default(false)
  designation        String?
  password           String?
  role               UserType              @default(STUDENT)
  isTwoFactorEnabled Boolean               @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts           Account[]
  companyDetails     CompanyDetails?
  posts              Post[]
  applications       Application[]
}

model CompanyDetails { 
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  isIndependentHire  Boolean               @default(false)
  description        String
  city               String
  industry           String
  employees          String
  imageUrl           String?
  userId             String                @db.ObjectId
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts              Post[]
  
  @@unique([userId])
}

model Post { 
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  isNearCity         Boolean?              @default(false)
  internResponsibilities String
  monthOrWeeks       String
  additionalPreferences String
  cities             String[]
  internshipDuration String
  internshipProfile  String
  internshipStartDate String
  internshipType     String
  noOfDaysInOfficeInWeek String?
  noOfOpenings       String
  partOrFullTime     String
  requiredSkills     String[]
  whoCanApply        String
  userId             String                @db.ObjectId
  companyId          String                @db.ObjectId
  applications       Application[]
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  company            CompanyDetails        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, title])
}

model Application {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  studentId          String                @db.ObjectId
  postId             String                @db.ObjectId
  status             String                @default("PENDING")
  createdAt          DateTime              @default(now())
  student            User                  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  post               Post                  @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, postId])
}

model Account {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  userId             String                @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?               @db.String
  access_token       String?               @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?               @db.String
  session_state      String?
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  email              String?               @unique
  token              String                @unique
  expires            DateTime?
  
  @@unique([email, token])
}

model PasswordResetToken {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  email              String?               @unique
  token              String                @unique
  expires            DateTime?
  
  @@unique([email, token])
}

model PhoneVerificationOtp {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  phone              String?               @unique
  otp                String                @unique
  expires            DateTime?
  
  @@unique([phone, otp])
}

model TwoFactorToken {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  email              String?               @unique
  token              String                @unique
  expires            DateTime?
  
  @@unique([email, token])
}

model TwoFactorConfirmation { 
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  userId             String                @db.ObjectId
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
}
